#include <inc/assert.h>

#include <kern/env.h>
#include <kern/pmap.h>
#include <kern/monitor.h>


// Choose a user environment to run and run it.
void
sched_yield(void)
{
	// Implement simple round-robin scheduling.
	// Search through 'envs' for a runnable environment,
	// in circular fashion starting after the previously running env,
	// and switch to the first such environment found.
	// It's OK to choose the previously running env if no other env
	// is runnable.
	// But never choose envs[0], the idle environment,
	// unless NOTHING else is runnable.

	// LAB 4: Your code here.
	// Code added by Sandeep / Swastika 	
	
	int i, j, next_found;
	if (curenv)
	{ 
		next_found = 0;				// flag
		i  = ENVX(curenv->env_id);		// current running envs[]
		j = (i + 1) % NENV;			// next-to-run envs[]
		while (j!=i)
		{
			if (j!=0 && envs[j].env_status == ENV_RUNNABLE)
			{
				next_found = 1;
				break;
			}
			j = (j+1) % NENV;
		}
		if (next_found == 1)
			env_run(&envs[j]);
		else if (envs[i].env_status == ENV_RUNNABLE)
			env_run(&envs[i]); 
		// Run the special idle environment when nothing else is runnable.
		else if (envs[0].env_status == ENV_RUNNABLE)
			env_run(&envs[0]);
		else {
			cprintf("Destroyed all environments - nothing more to do!\n");
			while (1)
				monitor(NULL);
		}
	}
	else if (envs[0].env_status == ENV_RUNNABLE)
		env_run(&envs[0]);
	else {
		cprintf("Destroyed all environments - nothing more to do!\n");
		while (1)
			monitor(NULL);
	}
}
